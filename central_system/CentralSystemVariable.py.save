#Declare Inputs Pin Variables
Phone_PIN = 26 #Pin number for Phone Activation input
DistFace_PIN = 27 ##Pin number for Facial Distraction Activation input
DistFace2_PIN = 17 ##Pin number for Facial Distraction Activation 2 input
Lane_PIN = 20 #Pin number for Departed Lane Signal Out of Lane input
DrwFace_PIN = 22 #Pin number for Facial Drowsy Activation input
DrwFace2_PIN = 13 #Pin number for Facial Drowsy Activation 2 input
Voice_PIN = 16 #Pin number for Voice System User Request input


#Declare Output Pin Variables
Hazards_PIN = 23 #Pin number for Hazards Activation output
Vibration_PIN = 5 #Pin number for Vibration Activation output
Voice1_PIN = 12 #Pin number for Activate Voice System output
Voice2_PIN = 6 #Pin number for Activate Voice System 2 output
Atomizer_PIN = 19 #Pin number for Atomizer Activation output

import RPi.GPIO as GPIO
import time 
GPIO.setmode(GPIO.BCM)
GPIO.setup(Phone_PIN, GPIO.IN, pull_up_down = GPIO.PUD_DOWN) #Create input pin for Phone Signal with pull down resistor
GPIO.setup(DistFace_PIN, GPIO.IN, pull_up_down =GPIO.PUD_DOWN)#Create input pin for Facial Distraction Signal with pull down resistor
GPIO.setup(DistFace2_PIN, GPIO.IN, pull_up_down =GPIO.PUD_DOWN)#Create input pin for Facial Distraction 2 Signal with pull down resistor
GPIO.setup(Lane_PIN, GPIO.IN, pull_up_down =GPIO.PUD_DOWN)#Create input pin for Lane Signal with pull down resistor
GPIO.setup(DrwFace_PIN, GPIO.IN, pull_up_down =GPIO.PUD_DOWN)#Create input pin for Facial Drowsy Signal with pull down resistor
GPIO.setup(DrwFace2_PIN, GPIO.IN, pull_up_down =GPIO.PUD_DOWN)#Create input pin for Facial Drowsy 2 Signal with pull down resistor
GPIO.setup(Voice_PIN, GPIO.IN, pull_up_down =GPIO.PUD_DOWN)#Create input pin for Voice Signal with pull down resistor
GPIO.setup(Hazards_PIN, GPIO.OUT) #Create Output pin for Hazards signal
GPIO.setup(Vibration_PIN, GPIO.OUT)#Create Output pin for Vibration signal
GPIO.setup(OutVoice_PIN, GPIO.OUT)#Create Output pin for Voice signal
GPIO.setup(OutVoice2_PIN, GPIO.OUT)#Create Output pin for Voice 2 signal
GPIO.setup(Atomizer_PIN, GPIO.OUT)#Create Output pin for Atomizer signal

out_Hazards = 0
out_Atomizer = 0
out_Vibration = 0
out_Voice1 = 0
out_Voice2 = 0

def updateInput():
        in_Phone = GPIO.input(Phone_PIN)
        in_DistFace = GPIO.input(DistFace_PIN)
        in_DistFace2 = GPIO.input(DistFace2_PIN)
        in_Lane = GPIO.input(Lane_PIN)
        in_DrwFace = GPIO.input(DrwFace_PIN)
        in_DrwFace2 = GPIO.input(DrwFace2_PIN)
        in_Voice = GPIO.input(Voice_PIN)

def printStates():
        print " P F1 F2 F3 F4 Vo L |A Vb Vo1 Vo2 H "
	print " {} {} {} {} {} {} {} | {}  {}  {}  {}  {} ".format(in_Phone, in_DistFace, in_DistFace2, in_DrwFace, in_DrwFace2, in_Voice, in_Lane, out_Atomizer, out_Vibration, out_Voice1, out_Voice2, out_Hazards) 

def updateLogic():

        if Phone_PIN and DistFace_PIN and DistFace2_PIN:
                out_Hazards=1  and G and GPIO.output(12,0)
        else: 
                GPIO.output(23 ,0) and GPIO.output(6,0) and GPIO.output(12,0)
        if DistFace_PIN:
                GPIO.output(12,1) and GPIO.output(6,0)
        else:
                GPIO.output(12,0) and GPIO.output(6,0)
        if DistFace2_PIN:
                GPIO.output(23,1) and GPIO.ouput(12,1) and GPIO.output(6,0)
        else:
                GPIO.output(23,0) and GPIO.ouput(12,0) and GPIO.output(6,0)
        if Lane_PIN:
                GPIO.output(5,1)
        else: 
         	GPIO.output(5,0)
        if Voice_PIN:
                GPIO.output(19,1)
        else: 
                GPIO.output(19,0)
        if Voice_PIN and Lane_PIN: 
                GPIO.output(12,1) and GPIO.ouput(6,0) and GPIO.output(5,1) and GPIO.output(19,1) 
        else:
                GPIO.output(12,0) and GPIO.output(5,0) and GPIO.output(19,0) and GPIO.output(6,0) 
        if Phone_PIN:
                GPIO.output(23,1) and GPIO.output(6,1) and GPIO.output(12,0) 
        else: 
                GPIO.output(23, 0) and GPIO.output(12,0) and GPIO.output(6,0)

def updateOutput():
	GPIO.output(Hazards_PIN, out_Hazards)
	GPIO.output(Vibration_PIN, out_Vibration)
	GPIO.output(Voice1_PIN, out_Voice1)
	GPIO.output(Voice2_PIN, out_Voice2)
	GPIO.output(Atomizer_PIN, out_Atomizer)
	



while 1==1:
 updateInput()
 updateLogic()
 updateOutput()
 printStates()
        
                
